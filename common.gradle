// Load common properties
Properties mergedProperties = new Properties();
mergedProperties.load(new FileInputStream("$project.rootDir/../common.properties"));
// Loader-specific gradle.properties takes priority
mergedProperties.load(new FileInputStream("gradle.properties"));
mergedProperties.each { prop -> project.ext.set(prop.key, prop.value); }

project.ext.set("mergedProperties", mergedProperties)

task processChangelog(type: Copy) {
	mustRunAfter(build)
	from('.') {
		include 'CHANGELOG.md'
		expand project.properties
	}
	into 'build/info'
}

task mergeChangelog(dependsOn: processChangelog) {
	mustRunAfter(processChangelog)
	doLast {
		def headFile = file('../CHANGELOG.md');
		def changelogFile = file('build/info/CHANGELOG.md');
		def tailFile = file('../NOTE.md');
		def outputFile = file('build/info/CHANGELOG_FULL.md');

		def outputText = "";

		if (headFile.exists()) {
			outputText += headFile.text;
			outputText += '\n';
		}
		if (changelogFile.exists()) {
			outputText += changelogFile.text;
			outputText += '\n';
		}
		if (tailFile.exists()) {
			outputText += tailFile.text;
			outputText += '\n';
		}

		outputFile.text = outputText;
	}
}

// Define a custom task to dump properties
task exportProperties {
	mustRunAfter(build)
	doLast {
		File outputDir = file("$buildDir/info");
		outputDir.mkdirs();
		File outputFile = file("$outputDir/properties.txt");
		outputFile.withWriter { writer ->
			mergedProperties.each { key, value -> writer.writeLine("${key}=${value}"); }
		}
	}
}

task prepareInfo {
	dependsOn 'mergeChangelog', 'exportProperties'
}
